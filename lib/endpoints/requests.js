// Generated by CoffeeScript 1.8.0
module.exports = function(request) {
  var funcs, status, _i, _len, _ref;
  funcs = {
    all: function(cb) {
      return request('/requests', {
        method: 'GET'
      }, cb);
    },
    create: function(payload, user, cb) {
      if (!cb) {
        cb = user;
        user = void 0;
      }
      return request('/requests', {
        method: 'POST',
        qs: {
          user: user
        },
        json: payload
      }, cb);
    },
    get: function(requestId, cb) {
      return request('/requests/request/{requestId}', {
        method: 'GET',
        pathParams: {
          requestId: requestId
        }
      }, cb);
    },
    "delete": function(requestId, cb) {
      return request('/requests/request/{requestId}', {
        method: 'DELETE',
        pathParams: {
          requestId: requestId
        }
      }, cb);
    },
    bounce: function(requestId, user, cb) {
      if (!cb) {
        cb = user;
        user = void 0;
      }
      return request('/requests/request/{requestId}/bounce', {
        method: 'POST',
        pathParams: {
          requestId: requestId
        },
        qs: {
          user: user
        }
      }, cb);
    },
    scale: function(instanceCount, user, cb) {
      if (!cb) {
        cb = user;
        user = void 0;
      }
      return request('/requests/request/{requestId}/instances', {
        method: 'PUT',
        pathParams: {
          requestId: requestId
        },
        qs: {
          user: user
        },
        json: {
          instances: instanceCount
        }
      }, cb);
    },
    pause: function(user, cb) {
      throw "not documented, dont know what the body should include";
      if (!cb) {
        cb = user;
        user = void 0;
      }
      return request('/requests/request/{requestId}/pause', {
        method: 'POST',
        pathParams: {
          requestId: requestId
        },
        qs: {
          user: user
        }
      }, cb);
    },
    unpause: function(user, cb) {
      if (!cb) {
        cb = user;
        user = void 0;
      }
      return request('/requests/request/{requestId}/unpause', {
        method: 'POST',
        pathParams: {
          requestId: requestId
        },
        qs: {
          user: user
        }
      }, cb);
    },
    run: function(cmdlineArgs, user, cb) {
      if (!cb) {
        cb = user;
        user = void 0;
      }
      return request('/api/requests/request/{requestId}/run', {
        method: 'POST',
        pathParams: {
          requestId: requestId
        },
        qs: {
          user: user
        },
        body: cmdlineArgs
      }, cb);
    }
  };
  _ref = ["active", "cooldown", "finished", "paused", "queued/cleanup", "queued/pending"];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    status = _ref[_i];
    funcs[status] = function(cb) {
      return request("/requests/" + status, {
        method: 'GET'
      }, cb);
    };
  }
  return funcs;
};
